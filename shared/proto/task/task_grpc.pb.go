// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package taskService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	GetTasks(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*GetTasksRes, error)
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRes, error)
	UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskRes, error)
	DeleteTasks(ctx context.Context, in *DeleteTasksReq, opts ...grpc.CallOption) (*DeleteTasksRes, error)
	SwitchCompleted(ctx context.Context, in *SwitchCompletedReq, opts ...grpc.CallOption) (*SwitchCompletedRes, error)
	GetCompletedTasksTotal(ctx context.Context, in *GetTasksTotalReq, opts ...grpc.CallOption) (*GetCompletedTasksTotalRes, error)
	GetCompletedTasksDailyTotal(ctx context.Context, in *GetTasksTotalReq, opts ...grpc.CallOption) (*CompletedTasksDailyTotalRes, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTasks(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*GetTasksRes, error) {
	out := new(GetTasksRes)
	err := c.cc.Invoke(ctx, "/task.taskService/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRes, error) {
	out := new(CreateTaskRes)
	err := c.cc.Invoke(ctx, "/task.taskService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskRes, error) {
	out := new(UpdateTaskRes)
	err := c.cc.Invoke(ctx, "/task.taskService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTasks(ctx context.Context, in *DeleteTasksReq, opts ...grpc.CallOption) (*DeleteTasksRes, error) {
	out := new(DeleteTasksRes)
	err := c.cc.Invoke(ctx, "/task.taskService/DeleteTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SwitchCompleted(ctx context.Context, in *SwitchCompletedReq, opts ...grpc.CallOption) (*SwitchCompletedRes, error) {
	out := new(SwitchCompletedRes)
	err := c.cc.Invoke(ctx, "/task.taskService/SwitchCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetCompletedTasksTotal(ctx context.Context, in *GetTasksTotalReq, opts ...grpc.CallOption) (*GetCompletedTasksTotalRes, error) {
	out := new(GetCompletedTasksTotalRes)
	err := c.cc.Invoke(ctx, "/task.taskService/GetCompletedTasksTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetCompletedTasksDailyTotal(ctx context.Context, in *GetTasksTotalReq, opts ...grpc.CallOption) (*CompletedTasksDailyTotalRes, error) {
	out := new(CompletedTasksDailyTotalRes)
	err := c.cc.Invoke(ctx, "/task.taskService/GetCompletedTasksDailyTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	GetTasks(context.Context, *GetTasksReq) (*GetTasksRes, error)
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRes, error)
	UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskRes, error)
	DeleteTasks(context.Context, *DeleteTasksReq) (*DeleteTasksRes, error)
	SwitchCompleted(context.Context, *SwitchCompletedReq) (*SwitchCompletedRes, error)
	GetCompletedTasksTotal(context.Context, *GetTasksTotalReq) (*GetCompletedTasksTotalRes, error)
	GetCompletedTasksDailyTotal(context.Context, *GetTasksTotalReq) (*CompletedTasksDailyTotalRes, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) GetTasks(context.Context, *GetTasksReq) (*GetTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTaskServiceServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTasks(context.Context, *DeleteTasksReq) (*DeleteTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTasks not implemented")
}
func (UnimplementedTaskServiceServer) SwitchCompleted(context.Context, *SwitchCompletedReq) (*SwitchCompletedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchCompleted not implemented")
}
func (UnimplementedTaskServiceServer) GetCompletedTasksTotal(context.Context, *GetTasksTotalReq) (*GetCompletedTasksTotalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedTasksTotal not implemented")
}
func (UnimplementedTaskServiceServer) GetCompletedTasksDailyTotal(context.Context, *GetTasksTotalReq) (*CompletedTasksDailyTotalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedTasksDailyTotal not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasks(ctx, req.(*GetTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/DeleteTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTasks(ctx, req.(*DeleteTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SwitchCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchCompletedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SwitchCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/SwitchCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SwitchCompleted(ctx, req.(*SwitchCompletedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetCompletedTasksTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksTotalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetCompletedTasksTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/GetCompletedTasksTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetCompletedTasksTotal(ctx, req.(*GetTasksTotalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetCompletedTasksDailyTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksTotalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetCompletedTasksDailyTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/GetCompletedTasksDailyTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetCompletedTasksDailyTotal(ctx, req.(*GetTasksTotalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.taskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasks",
			Handler:    _TaskService_GetTasks_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTasks",
			Handler:    _TaskService_DeleteTasks_Handler,
		},
		{
			MethodName: "SwitchCompleted",
			Handler:    _TaskService_SwitchCompleted_Handler,
		},
		{
			MethodName: "GetCompletedTasksTotal",
			Handler:    _TaskService_GetCompletedTasksTotal_Handler,
		},
		{
			MethodName: "GetCompletedTasksDailyTotal",
			Handler:    _TaskService_GetCompletedTasksDailyTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
